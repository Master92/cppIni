name: Build

on:
  # Triggers the workflow on push or pull request events but only for the "master" branch
  push:
    branches:
      - "master"
      - "develop"
  pull_request:
    branches:
      - "master"
      - "develop"

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      # Set fail-fast to false to ensure that feedback is delivered for all matrix combinations. Consider changing this to true when your workflow is stable.
      fail-fast: false

      # Set up a matrix to run the following 3 configurations:
      # 1. <Windows, Release, latest MSVC compiler toolchain on the default runner image, default generator>
      # 2. <Linux, Release, latest GCC compiler toolchain on the default runner image, default generator>
      # 3. <Linux, Release, latest Clang compiler toolchain on the default runner image, default generator>
      #
      # To add more build types (Release, Debug, RelWithDebInfo, etc.) customize the build_type list.
      matrix:
        os: [ ubuntu-latest, windows-latest ]
        build_type: [ Release ]
        c_compiler: [ gcc, clang, cl ]
        include:
          - os: windows-latest
            c_compiler: cl
            cpp_compiler: cl
          - os: ubuntu-latest
            c_compiler: gcc
            cpp_compiler: g++
          - os: ubuntu-latest
            c_compiler: clang
            cpp_compiler: clang++
        exclude:
          - os: windows-latest
            c_compiler: gcc
          - os: windows-latest
            c_compiler: clang
          - os: ubuntu-latest
            c_compiler: cl

    steps:
      - uses: actions/checkout@v3

      - name: üîß Install GCC
        uses: egor-tensin/setup-gcc@v1.3
        if: matrix.os == 'ubuntu-latest' && matrix.c_compiler == 'gcc'
        with:
          version: 13

      - name: üîß Install Clang
        uses: egor-tensin/setup-clang@v1.4
        if: matrix.os == 'ubuntu-latest' && matrix.c_compiler == 'clang'
        with:
          version: 16

      - name: üîß Setup python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          cache: pip

      - name: ‚òÅÔ∏è Install required python packages
        run: pip install -r requirements.txt

      - name: üí¨ Set reusable strings
        # Turn repeated input strings (such as the build output directory) into step outputs. These step outputs can be used throughout the workflow file.
        id: strings
        shell: bash
        run: echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"

      - name: üê∏ Create default Conan profile
        run: conan profile detect

      - name: ‚òÅÔ∏è Get dependencies
        run: conan install ${{ github.workspace }} --build=missing --output-folder=build --settings compiler.cppstd=20

      - name: üõ†Ô∏è Configure CMake
        run: > 
          cmake -B ${{ steps.strings.outputs.build-output-dir }} 
          -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} 
          -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }}
          -DCMAKE_C_COMPILER=${{ matrix.c_compiler }}
          -DBUILD_TESTING=ON
          -DCODE_COVERAGE=OFF
          --toolchain=conan_toolchain.cmake
          -S ${{ github.workspace }}

      - name: üî® Build project
        run: cmake --build ${{ steps.strings.outputs.build-output-dir }} --config ${{ matrix.build_type }} --parallel

      - name: üèÉ Run test suite
        working-directory: build
        run: ctest --build-config ${{ matrix.build_type }}
