name: Build

on:
  # Triggers the workflow on push or pull request events but only for the "master" branch
  push:
    branches:
      - "master"
      - "develop"
  pull_request:
    branches:
      - "master"
      - "develop"

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      # Set fail-fast to false to ensure that feedback is delivered for all matrix combinations. Consider changing this to true when your workflow is stable.
      fail-fast: false

      # Set up a matrix to run the following 3 configurations:
      # 1. <Windows, Release, latest MSVC compiler toolchain on the default runner image, default generator>
      # 2. <Linux, Release, latest GCC compiler toolchain on the default runner image, default generator>
      # 3. <Linux, Release, latest Clang compiler toolchain on the default runner image, default generator>
      #
      # To add more build types (Release, Debug, RelWithDebInfo, etc.) customize the build_type list.
      matrix:
        os: [ ubuntu-24.04, windows-latest ]
        build_type: [ Release ]
        c_compiler: [ gcc, clang, cl ]
        include:
          - os: windows-latest
            c_compiler: cl
            cpp_compiler: cl
          - os: ubuntu-24.04
            c_compiler: gcc
            cpp_compiler: g++
          - os: ubuntu-24.04
            c_compiler: clang
            cpp_compiler: clang++
        exclude:
          - os: windows-latest
            c_compiler: gcc
          - os: windows-latest
            c_compiler: clang
          - os: ubuntu-24.04
            c_compiler: cl

    steps:
      - uses: actions/checkout@v4

      - name: 🔧 Install GCC
        uses: egor-tensin/setup-gcc@v1.3
        if: matrix.os == 'ubuntu-24.04' && matrix.c_compiler == 'gcc'
        with:
          version: 13

      - name: 🔧 Install Clang
        uses: egor-tensin/setup-clang@v1.4
        if: matrix.os == 'ubuntu-24.04' && matrix.c_compiler == 'clang'
        with:
          version: 16

      - name: 🔧 Setup python
        uses: actions/setup-python@v5
        with:
          python-version: '3.13'
          cache: 'pip'

      - name: ☁️ Install required python packages
        run: pip install -r requirements.txt

      - name: 💬 Set reusable strings
        # Turn repeated input strings (such as the build output directory) into step outputs. These step outputs can be used throughout the workflow file.
        id: strings
        shell: bash
        run: | 
          echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"
          if [ "${{ matrix.os }}" == "windows-latest" ]; then
            echo "preset-name=conan-default" >> "$GITHUB_OUTPUT"
          else
            echo "preset-name=conan-release" >> "$GITHUB_OUTPUT"
          fi

      - name: 🐸 Create default Conan profile
        run: conan profile detect

      - name: ☁️ Get dependencies
        run: conan install ${{ github.workspace }} --build=missing -s compiler.cppstd=20 -o testing=True

      - name: 🛠️ Configure CMake
        run: cmake --preset ${{ steps.strings.outputs.preset-name }}

      - name: 🔨 Build project
        run: cmake --build --preset conan-release --parallel

      - name: 🏃 Run test suite
        run: ctest --preset conan-release
